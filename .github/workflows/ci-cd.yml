name: Spring Framework CI/CD with Gradle

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: application.properties 파일 생성
        run: |
          echo "application.properties 파일 생성"
          echo "src/main/resources 폴더 생성"
          mkdir -p src/main/resources 
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: Build with Gradle
        run: |
          echo "gradle 빌드 시작"
          chmod +x ./gradlew
          ./gradlew build
          echo "gradle 빌드 완료"

      - name: 도커 로그인
        run: |
          echo "Docker 로그인 중..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 도커 이미지 빌드
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: Docker Hub 에 Push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest

      - name: DEPLOY
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            echo "도커 이미지 가져 오는중..."
            docker pull  ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest 
            echo "실행중인 컨테이너 확인"
            if [ "$(docker ps -q -f name=${{ secrets.DOCKER_CONTAINER_NAME }})" ]; then
              echo "실행중이던 컨테이너 중지"
              docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
              echo "실행중이던 컨테이너 삭제"
              docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            else
              echo "실행중인 컨테이너 없음"
            fi
            echo "pull과정에서 생긴 none 태그 images 삭제"
            docker rmi $(docker images -f "dangling=true" -q)
            echo "새로운 컨테이너 실행"
            docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest 
